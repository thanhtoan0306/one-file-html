Create a single HTML file named "dna_replication.html" that uses embedded CSS and Three.js (version r140 or later) to simulate the process of DNA replication. The simulation should be visually engaging and demonstrate the key steps of replication. The entire code (HTML, CSS, and JavaScript) must be contained within this single file. Include comments in the code to explain each section.

1.  **HTML Structure (All-in-One):**
    *   Include the basic HTML5 structure (DOCTYPE, html, head, body).
    *   Include a `<style>` tag within the `<head>` section.  This will contain all the CSS rules.
    *   Include a `<script>` tag for the Three.js library (either from a CDN or, less ideally, copy-pasted into the file â€“ CDN is strongly preferred for maintainability). Specify version r140 or later.  Example: `<script src="https://cdn.jsdelivr.net/npm/three@0.140.0/build/three.min.js"></script>`
    *   Include a `<script>` tag for the OrbitControls, load it from CDN. Example: `<script src="https://cdn.jsdelivr.net/npm/three@0.140.0/examples/js/controls/OrbitControls.js"></script>`
    *   Include a `<script>` tag *after* the Three.js and OrbitControls script tags. This will contain all of your custom JavaScript code (scene setup, DNA model, animation, etc.). No `defer` attribute is needed here because the script tags are in the correct order.
    *   Include a `<canvas>` element within the `<body>` with an ID (e.g., "dnaCanvas") where the Three.js scene will be rendered.

2.  **CSS (Inside `<style>` tag):**
    *   Make the `body` and `html` elements take up the full height and width of the viewport (height: 100%, width: 100%, margin: 0, padding: 0).
    *   Set the `canvas` element to display as a block and take up the full width and height of its container (which will be the body).
     * Set a background color. A dark color, for good constrast with DNA models. (e.g., background-color: #111;)
    *   Hide any scrollbars (overflow: hidden).

3.  **JavaScript (Inside the second `<script>` tag):**

    *   **Setup:**
        *   Create a Three.js `Scene`, `PerspectiveCamera`, and `WebGLRenderer`.
        *   Set the renderer's size to the full window dimensions.
        *   Append the renderer's DOM element (the canvas) to the HTML document, referencing the canvas by its ID.
        *   Add `OrbitControls` to allow camera manipulation (rotation, zoom, pan).
        *   Add at least one `AmbientLight` and one `DirectionalLight` to illuminate the scene.
        *   Create an animation loop (`requestAnimationFrame`) to continuously render the scene.

    *   **DNA Model (Initial Double Helix):**
        *   Create a function `createDNA(length)` that generates the initial, complete DNA double helix.  The `length` parameter determines how many base pairs to create.
        *   Use `CylinderGeometry` for the sugar-phosphate backbones (two of them, spiraling).  Use a visually distinct color (e.g., blue and purple).
        *   Use `SphereGeometry` or small `BoxGeometry` for the base pairs (A-T, C-G). Use four different colors, one for each base (A, T, C, G). Connect A-T and C-G with a short line or thin cylinder if desired.
        *   Arrange the backbones and base pairs in a double helix configuration using appropriate mathematical transformations (sine and cosine for the spiral).
        *   Group all the DNA components into a single Three.js `Group` and return the group.

    *   **Replication Fork:**
        *   Create a function `createReplicationFork(dna, separationPoint)` that takes the original DNA `Group` (from `createDNA`) and a `separationPoint` (a number between 0 and the DNA length) as input.
        *   This function should:
            *   Clone the original DNA.
            *   Modify the cloned DNA to visually represent the unzipping process.  This means:
                *   For base pairs *before* the `separationPoint`, keep them connected.
                *   For base pairs *at and after* the `separationPoint`, separate the two strands.  Gradually increase the distance between corresponding base pairs on the two strands as you move further down the DNA from the `separationPoint`.  This creates the "Y" shape of the replication fork.
                *   You might need to create separate geometries for the "unzipped" portions of the backbones.
            *   Return a new `Group` containing the modified DNA.

    *   **Animation:**
        *   Create an animation function `animateReplication(dnaGroup, forkGroup, speed)` that controls the replication animation.
        *   This function should be called within the main animation loop.
         *   `dnaGroup`: The original DNA group.
        *    `forkGroup`: The replication fork group.
        *    `speed` is parameter to control speed animation.
        *   The animation should:
            *   Initially, hide the `forkGroup` (set its visibility to false).
            *   Gradually increase the `separationPoint` in the `createReplicationFork` function over time.
            *   Remove the old `forkGroup` from the scene and add the newly created `forkGroup` with the updated separation point.
            *   Simulate the addition of new base pairs to the separated strands.  This can be done by:
                *   Creating new `SphereGeometry` or `BoxGeometry` objects for the new base pairs.
                *   Positioning them correctly along the unzipped backbones, matching the existing base pairs (A with T, C with G).
                *   Gradually fading them in (changing their opacity or scale from 0 to 1) to simulate their appearance.
                *    Consider adding small, differently colored objects to represent enzymes (e.g., DNA polymerase) involved in the replication process, and animate their movement along the DNA strands.

     * **Main Execution:**
        * Call `createDNA` to create the initial DNA.
        * Add initial DNA to the scene.
        * Call `animateReplication` in animation loop.
    *   **Error Handling:** Include basic error handling (e.g., console.log errors) to help with debugging.

4.  **Important Considerations:**
    *   **Performance:** DNA replication is complex. For a large number of base pairs, the simulation might become slow. Optimize the geometry (use lower polygon counts if necessary) and animation logic to maintain a reasonable frame rate.
    *   **Clarity:** The visual representation should clearly show the separation of the strands, the formation of the replication fork, and the addition of new base pairs.
    *   **Accuracy:** While this is a simplified simulation, strive for a reasonable representation of the key steps of DNA replication.
    *   **Single File:** Ensure *all* code (HTML, CSS, JavaScript) is contained within the single "dna_replication.html" file.
    * **User Interaction**: The user can rotate and zoom the DNA with OrbitCOntrols